// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/jayanthvn/pure-gobpf/pkg/ebpf_progs (interfaces: APIs)

// Package mock_ebpf_progs is a generated GoMock package.
package mock_ebpf_progs

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAPIs is a mock of APIs interface.
type MockAPIs struct {
	ctrl     *gomock.Controller
	recorder *MockAPIsMockRecorder
}

// MockAPIsMockRecorder is the mock recorder for MockAPIs.
type MockAPIsMockRecorder struct {
	mock *MockAPIs
}

// NewMockAPIs creates a new mock instance.
func NewMockAPIs(ctrl *gomock.Controller) *MockAPIs {
	mock := &MockAPIs{ctrl: ctrl}
	mock.recorder = &MockAPIsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAPIs) EXPECT() *MockAPIsMockRecorder {
	return m.recorder
}

// LoadProg mocks base method.
func (m *MockAPIs) LoadProg(arg0 string, arg1 []byte, arg2, arg3 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadProg", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadProg indicates an expected call of LoadProg.
func (mr *MockAPIsMockRecorder) LoadProg(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadProg", reflect.TypeOf((*MockAPIs)(nil).LoadProg), arg0, arg1, arg2, arg3)
}

// PinProg mocks base method.
func (m *MockAPIs) PinProg(arg0 uint32, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PinProg", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PinProg indicates an expected call of PinProg.
func (mr *MockAPIsMockRecorder) PinProg(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PinProg", reflect.TypeOf((*MockAPIs)(nil).PinProg), arg0, arg1)
}
